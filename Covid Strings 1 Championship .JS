doc type html
html. lang.en
script
header=document create.element(header)
header.style.backgroundcolor=#4caf50
header.style.color=’white’
header.style.padding=’10px’
header.style.textalign=’center’
header.style.text.fontSize=’24px’
header.textcontent=’welcome to covid strings1 championship’
document appendchild(header)
<header.html>
heading variables 
the heading numbers that determine where each heading and subheading go 
heading1=championship overview
heading2=championship code
heading3=championship round questions
heading4=victory
subheading1=team stealing
<header.html>
championship overview
contains an overview of the championship
html
head
utf-eight
viewport content=width=device-width,inital scale one
title covid strings1 championship bracket
div id bracket class bracket div
script src bracket .js
head
body
link rel=stylesheet href css
bracket container{}
matchup{}
solid zero;
filename=covid strings1 championship game.js
<header.html>
championship code 
contains the parts of the championship round before victory
championship game=(high and lowest remaining seeds) 
team high seed= highest remaining seed
team low seed = lowest remaining seed
create matchup (team low seed versus team high seed )
matchup div=matchup
document.createelement 
matchupdiv.classname=(matchup)
matchupdiv.innerhtml =[matchup]
rounddiv.appendchild(matchup)
bracket.appendchild(round div)
(i covid strings seed list)
round div=createelement
round div name= covid strings1 second round
bracket.appendchild(round div)
(event.target.covid strings seed list.contains(matchup))
event.target.covid strings seed list.toggle
add matchup
<header.html>
championship round questions
the questions asked in the championship round of the covid strings contest
java util.scanner
java.util
championship round questions=questions[27-34]
collections.shuffle(arrays.aslist(questions)
question27
question28
question29
question30
question31
question32
question33
question34
private string getblanks(int numberofblanks)
char[] chars =new char[numberofblanks]
arrays.fill chars 
return new string chars 
bracket.addeventlistener((event)) => 
myclass=(non-concatenated)
if category==math problem:
prompt
log
myclass=new myclass(concatenated) 
return category
if category==math problem:
prompt
log
else:
select from multiple choice
if category == multiple choice:
select answer
else:
prompt
log
import syntax 
team1=lower ranked seed
team2=the higher seeded opponent
points: 10 points or 20 points
<subheading.html>
team stealing
steal points(stealingteam,victimteam,pointstosteal)
if(victimteam.points>=pointtosteal)
victimteam.points-=pointtosteal;
stealingteampoints+=pointstosteal
console.log([stealingteam.name} stole points from {victim team name}!)
else:
console.log({victimteam.name} doesnt have enough points to steal)
if teams final  answer==incorrect:
opposing team steals
else:
change covid strings matchup  score
substring(start,end)
userin.multiple choice
<header.html>
victory
contains the functions and processes necessary to declare the winning team
if selectedanswer==correct:
return true
if selectedanswer=incorrect
return false
advancingteam= slice (current team)
declarewinner
team high seed score>=sixty:
result= declarewinner(team1 score, team2 score)
log(team high seed wins covid strings1) 
else:
log(team low seed wins covid strings1)
return filename


