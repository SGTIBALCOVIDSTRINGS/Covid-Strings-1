<doc.type.HTML>
<script>
<Html>
    <Head>
    <Meta Charset UTF-Eight
    Meta Name= Viewport Content=Width=Device-Width, Inital Scale One 
    <Title> Covid Strings1 Second  Round </Title> 
  </Head>
    <Body>
    <Link Rel= Stylesheet Href=CSS
        Bracket-Container
        .Matchup{}
        Solid Zero;
FileName=Covid Strings1 Second Round.JS
secondround=(highest remaining seed,intermediate seed1,intermediate seed2,lowest remaining seed) 
Console.Log (Covid Strings1 Second Round)
Create Matchup (Intermediate Seed2 Versus Intermediate Seed1)
Create Matchup (Lowest Remaining Seed Versus Highest Remaining Seed)
Const Matchup Div=matchup
CreateElement 
ClassName
InnerHTML
AppendChild
For (I In Covid Strings Seed List)
Const Round Div=CreateElement
Round Div Class Name= Covid Strings1 Second Round
AppendChild(Round Div)
If (Event.Target.Covid Strings Seed List.Contains(Matchup))
Event.Target.Covid Strings Seed List.Toggle
Import Java Util.Scanner
Import Java.Util
Questions[]Questions={
 question18
New Question19
New Question20
New Question21
New Question22
New Question23
New Question24
New Question25
New Question26
select class
const myclass=(non-concatenated)
If category==math problem:
prompt
log
else:
select from multiple choice
if category == multiplechoice:
Select Answer
else:
prompt
log
const myclass=new myclass(concatenated) 
If category==math problem:
prompt
log
else:
select from multiple choice
If category == multiplechoice:
select answer
else:
prompt
log
If SelectedAnswer==correct:
return True
If SelectedAnswer==Incorrect:
return False
AdvancingTeams=Teams.Slice(CurrentTeams.Length)
DeclareWinner
If IntermediateSeed1Score>=fourty:
Log(Intermediate Seed1 Wins )
Else:
Log(Intermediate Seed2 Wins)
If Highest Remaining Seed Score>=fourty:
Log(Highest Remaining Seed Wins)
Else:
Log(Lowest Remaining Seed Wins)
Return FileName
